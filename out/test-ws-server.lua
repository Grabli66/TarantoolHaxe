-- Generated by Haxe 3.4.0
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
Int = (function() _hxClasses.Int = _hx_o({__fields__={__name__=true},__name__={"Int"}}); return _hxClasses.Int end)();
Dynamic = (function() 
_hxClasses.Dynamic = _hx_o({__fields__={__name__=true},__name__={"Dynamic"}}); return _hxClasses.Dynamic end)();
Float = (function() 
_hxClasses.Float = _hx_e(); return _hxClasses.Float end)();
Float.__name__ = {"Float"}
Bool = (function() 
_hxClasses.Bool = _hx_e(); return _hxClasses.Bool end)();
Bool.__ename__ = {"Bool"}
Class = (function() 
_hxClasses.Class = _hx_o({__fields__={__name__=true},__name__={"Class"}}); return _hxClasses.Class end)();
Enum = _hx_e();

local Array = _hx_e()
local IChannel = _hx_e()
local IWriteChannel = _hx_e()
local IReadChannel = _hx_e()
local IRWChannel = _hx_e()
local WorkState = _hx_e()
local InternalHandler = _hx_e()
local Math = _hx_e()
local Peer = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringTools = _hx_e()
local TcpSocket = _hx_e()
local TestWsServer = _hx_e()
local WebSocketServer = _hx_e()
local haxe = {}
haxe.IMap = _hx_e()
haxe.Log = _hx_e()
haxe.io = {}
haxe.io.Bytes = _hx_e()
haxe.crypto = {}
haxe.crypto.Base64 = _hx_e()
haxe.crypto.BaseCode = _hx_e()
haxe.crypto.Sha1 = _hx_e()
haxe.ds = {}
haxe.ds.StringMap = _hx_e()
haxe.io.Eof = _hx_e()
haxe.io.Error = _hx_e()
local lua = {}
lua.Boot = _hx_e()
lua.UserData = _hx_e()
lua.Thread = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self,0);
end
Array.__name__ = true
Array.prototype = _hx_a(
  'join', function(self,sep) 
    local tbl = ({});
    local _gthis = self;
    local cur_length = 0;
    local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function() 
      do return cur_length < _gthis.length end;
    end,next=function() 
      cur_length = cur_length + 1;
      do return _gthis[cur_length - 1] end;
    end});
    while (i:hasNext()) do 
      local i1 = i:next();
      _G.table.insert(tbl,Std.string(i1));
      end;
    do return _G.table.concat(tbl,sep) end
  end,
  'push', function(self,x) 
    _G.rawset(self,self.length,x);
    _G.rawset(self,"length",self.length + 1);
    do return _G.rawget(self,"length") end
  end,
  'slice', function(self,pos,_end) 
    if ((_end == nil) or (_end > self.length)) then 
      _end = self.length;
    else
      if (_end < 0) then 
        _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
      end;
    end;
    if (pos < 0) then 
      pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
    end;
    if ((pos > _end) or (pos > self.length)) then 
      do return _hx_tab_array({ }, 0) end;
    end;
    local ret = _hx_tab_array({ }, 0);
    local _g1 = pos;
    local _g = _end;
    while (_g1 < _g) do 
      _g1 = _g1 + 1;
      local i = _g1 - 1;
      ret:push(self[i]);
      end;
    do return ret end
  end,
  'iterator', function(self) 
    local _gthis = self;
    local cur_length = 0;
    do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function() 
      do return cur_length < _gthis.length end;
    end,next=function() 
      cur_length = cur_length + 1;
      do return _gthis[cur_length - 1] end;
    end}) end
  end
  ,'__class__',  Array
)

IChannel.new = {}
IChannel.__name__ = true
IChannel.prototype = _hx_a(
  
  '__class__',  IChannel
)

IWriteChannel.new = {}
IWriteChannel.__name__ = true
IWriteChannel.__interfaces__ = {IChannel}
IWriteChannel.prototype = _hx_a(
  
  '__class__',  IWriteChannel
)

IReadChannel.new = {}
IReadChannel.__name__ = true
IReadChannel.__interfaces__ = {IChannel}
IReadChannel.prototype = _hx_a(
  
  '__class__',  IReadChannel
)

IRWChannel.new = {}
IRWChannel.__name__ = true
IRWChannel.__interfaces__ = {IWriteChannel,IReadChannel}
_hxClasses["WorkState"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="HANDSHAKE","FRAME_TYPE","LENGTH","DATA"},4)}
WorkState = _hxClasses["WorkState"];
WorkState.HANDSHAKE = _hx_tab_array({[0]="HANDSHAKE",0,__enum__ = WorkState},2)

WorkState.FRAME_TYPE = _hx_tab_array({[0]="FRAME_TYPE",1,__enum__ = WorkState},2)

WorkState.LENGTH = _hx_tab_array({[0]="LENGTH",2,__enum__ = WorkState},2)

WorkState.DATA = _hx_tab_array({[0]="DATA",3,__enum__ = WorkState},2)


InternalHandler.new = function(peer,channel) 
  local self = _hx_new(InternalHandler.prototype)
  InternalHandler.super(self,peer,channel)
  return self
end
InternalHandler.super = function(self,peer,channel) 
  self._peer = peer;
  self._channel = channel;
  self._headers = haxe.ds.StringMap.new();
  self._state = WorkState.HANDSHAKE;
end
InternalHandler.__name__ = true
InternalHandler.__interfaces__ = {IWriteChannel}
InternalHandler.prototype = _hx_a(
  'decode', function(self,str) 
    local base = haxe.io.Bytes.ofString("0123456789abcdef");
    do return haxe.crypto.BaseCode.new(base):decodeBytes(haxe.io.Bytes.ofString(str:toLowerCase())) end
  end,
  'PushError', function(self,e) 
    if (self.OnError ~= nil) then 
      self:OnError(self._peer,e);
    end;
  end,
  'ProcessHandshake', function(self) 
    local s = StringTools.rtrim(self._channel:ReadUntil("\r\n"));
    local head = s:split(": ");
    if (head.length == 2) then 
      local v = head[1];
      local _this = self._headers;
      local key = head[0];
      _this.v[key] = v;
      _this.k[key] = true;
    end;
    if (s.length == 0) then 
      local this1 = self._headers;
      local key1 = this1.v["Sec-WebSocket-Key"] .. "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
      local sha = haxe.crypto.Sha1.encode(key1);
      local shaKey = haxe.crypto.Base64.encode(self:decode(sha));
      local stringBuffer_length;
      local stringBuffer_b = _hx_e();
      stringBuffer_length = 0;
      local str = "HTTP/1.1 101 Switching Protocols\r\n";
      _G.table.insert(stringBuffer_b,str);
      stringBuffer_length = stringBuffer_length + str.length;
      local str1 = "Upgrade: websocket\r\n";
      _G.table.insert(stringBuffer_b,str1);
      stringBuffer_length = stringBuffer_length + str1.length;
      local str2 = "Connection: Upgrade\r\n";
      _G.table.insert(stringBuffer_b,str2);
      stringBuffer_length = stringBuffer_length + str2.length;
      local str3 = Std.string("Sec-WebSocket-Accept: " .. shaKey .. "\r\n");
      _G.table.insert(stringBuffer_b,str3);
      stringBuffer_length = stringBuffer_length + str3.length;
      local str4 = "\r\n";
      _G.table.insert(stringBuffer_b,str4);
      stringBuffer_length = stringBuffer_length + str4.length;
      self._channel:WriteString(_G.table.concat(stringBuffer_b));
      self._state = WorkState.FRAME_TYPE;
      self:OnConnect(self._peer,self);
    end;
  end,
  'ProcessFrame', function(self) 
    local binaryData = self._channel:Read(2);
    local frame = binaryData.b[0];
    if ((_hx_bit.band(frame,8)) > 0) then 
      self._frameType = 8;
    else
      if ((_hx_bit.band(frame,2)) > 0) then 
        self._frameType = 2;
      else
        _G.error("Only binary frame allowed",0);
      end;
    end;
    local len = binaryData.b[1];
    self._packLen = 0;
    if ((_hx_bit.band(len,128)) < 1) then 
      _G.error("Only masked message allowed",0);
    end;
    local tmp = self;
    tmp._packLen = tmp._packLen + (_hx_bit.bxor(len,128));
    if (self._packLen > 125) then 
      self._state = WorkState.LENGTH;
    else
      self._state = WorkState.DATA;
    end;
  end,
  'ProcessLength', function(self) 
    if (self._packLen == 126) then 
      local binaryData = self._channel:Read(2);
      local tmp = self;
      tmp._packLen = tmp._packLen + binaryData.b[0];
    else
      if (self._packLen ~= 127) then 
        _G.error("Wrong length type",0);
      end;
    end;
    self._state = WorkState.DATA;
  end,
  'ProcessData', function(self) 
    local binaryData = self._channel:Read(self._packLen + 4);
    local _g = self._frameType;
    local _g1 = _g;
    if (_g1) == 2 then 
      local mask = binaryData:sub(0,4);
      local data = binaryData:sub(4,binaryData.length - 4);
      local res = haxe.io.Bytes.alloc(data.length);
      local _g11 = 0;
      local _g2 = data.length;
      while (_g11 < _g2) do 
        _g11 = _g11 + 1;
        local i = _g11 - 1;
        local j = _G.math.fmod(i, 4);
        local b = data.b[i];
        local d = _hx_bit.bxor(b,mask.b[j]);
        res.b[i] = _hx_bit.band(d,255);
        end;
      self:OnData(self._peer,self,res);
    elseif (_g1) == 8 then  end;
    self._state = WorkState.FRAME_TYPE;
  end,
  'Disconnect', function(self) 
    local _hx_expected_result = {}
    local _hx_status, _hx_result = pcall(function() 
    
        self._channel:Close();
       return _hx_expected_result end)
     if not _hx_status then 
      local _hx_1 = _hx_result
      local e = _hx_1
      haxe.Log.trace(e,_hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="InternalHandler.hx",lineNumber=242,className="InternalHandler",methodName="Disconnect"}));
     elseif _hx_result ~= _hx_expected_result then return _hx_result end;
  end,
  'Start', function(self) 
    local _hx_expected_result = {}
    local _hx_status, _hx_result = pcall(function() 
    
        while (true) do 
          local _g = self._state;
          local _g1 = _g[1];
          if (_g1) == 0 then 
            self:ProcessHandshake();
          elseif (_g1) == 1 then 
            self:ProcessFrame();
          elseif (_g1) == 2 then 
            self:ProcessLength();
          elseif (_g1) == 3 then 
            self:ProcessData(); end;
          end;
       return _hx_expected_result end)
     if not _hx_status then 
      local _hx_1 = _hx_result
      local e = _hx_1
      self:PushError(e);
      self:Disconnect();
     elseif _hx_result ~= _hx_expected_result then return _hx_result end;
  end,
  'Write', function(self,data) 
    local frame = haxe.io.Bytes.alloc(2 + data.length);
    frame.b[0] = 130;
    frame.b[1] = _hx_bit.band(data.length,255);
    frame:blit(2,data,0,data.length);
    do return self._channel:Write(frame) end
  end,
  'WriteString', function(self,data) 
    local frame = haxe.io.Bytes.alloc(2 + data.length);
    frame.b[0] = 129;
    frame.b[1] = _hx_bit.band(data.length,255);
    local dat = haxe.io.Bytes.ofString(data);
    frame:blit(2,dat,0,dat.length);
    do return self._channel:Write(frame) end
  end,
  'Close', function(self) 
    self._channel:Close();
  end
  ,'__class__',  InternalHandler
)

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end

Peer.new = function() 
  local self = _hx_new(Peer.prototype)
  Peer.super(self)
  return self
end
Peer.super = function(self) 
end
Peer.__name__ = true
Peer.prototype = _hx_a(
  
  '__class__',  Peer
)

String.new = {}
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        do return String.__oldindex[k] end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_a(
  'toLowerCase', function(self) 
    do return _G.string.lower(self) end
  end,
  'split', function(self,delimiter) 
    local idx = 1;
    local ret = _hx_tab_array({ }, 0);
    local delim_offset = (function() 
      local _hx_1
      if (delimiter.length > 0) then 
      _hx_1 = delimiter.length; else 
      _hx_1 = 1; end
      return _hx_1
    end )();
    while (idx ~= nil) do 
      local newidx = 0;
      if (delimiter.length > 0) then 
        newidx = _G.string.find(self,delimiter,idx,true);
      else
        if (idx >= self.length) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = _G.string.sub(self,idx,newidx - 1);
        ret:push(match);
        idx = newidx + delimiter.length;
      else
        ret:push(_G.string.sub(self,idx,_G.string.len(self)));
        idx = nil;
      end;
      end;
    do return ret end
  end,
  'toString', function(self) 
    do return self end
  end,
  'charAt', function(self,index) 
    do return _G.string.sub(self,index + 1,index + 1) end
  end,
  'charCodeAt', function(self,index) 
    do return _G.string.byte(self,index + 1) end
  end,
  'substr', function(self,pos,len) 
    if ((len == nil) or (len > (pos + self.length))) then 
      len = self.length;
    else
      if (len < 0) then 
        len = self.length + len;
      end;
    end;
    if (pos < 0) then 
      pos = self.length + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return _G.string.sub(self,pos + 1,pos + len) end
  end
  ,'__class__',  String
)

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return lua.Boot.__string_rec(s) end;
end
Std.int = function(x) 
  do return _hx_bit_clamp(x) end;
end

StringTools.new = {}
StringTools.__name__ = true
StringTools.isSpace = function(s,pos) 
  if (((s.length == 0) or (pos < 0)) or (pos >= s.length)) then 
    do return false end;
  end;
  local c = s:charCodeAt(pos);
  if (not ((c > 8) and (c < 14))) then 
    do return c == 32 end;
  else
    do return true end;
  end;
end
StringTools.rtrim = function(s) 
  local l = s.length;
  local r = 0;
  while ((r < l) and StringTools.isSpace(s,(l - r) - 1)) do 
    r = r + 1;
    end;
  if (r > 0) then 
    do return s:substr(0,l - r) end;
  else
    do return s end;
  end;
end
StringTools.hex = function(n,digits) 
  local s = "";
  local hexChars = "0123456789ABCDEF";
  while (true) do 
    s = hexChars:charAt(_hx_bit.band(n,15)) .. s;
    n = _hx_bit.rshift(n,4);
    if (not (n > 0)) then 
      break;
    end;
    end;
  if (digits ~= nil) then 
    while (s.length < digits) do 
      s = "0" .. s;
      end;
  end;
  do return s end;
end

TcpSocket.new = function(luaSock) 
  local self = _hx_new(TcpSocket.prototype)
  TcpSocket.super(self,luaSock)
  return self
end
TcpSocket.super = function(self,luaSock) 
  if (luaSock ~= nil) then 
    self._sock = luaSock;
  else
    self._module = require("socket");
  end;
end
TcpSocket.__name__ = true
TcpSocket.__interfaces__ = {IRWChannel}
TcpSocket.prototype = _hx_a(
  'Read', function(self,size) 
    local res = self._sock:read(size);
    if (res == "") then 
      do return nil end;
    end;
    if (res == nil) then 
      _G.error("Socket error",0);
    end;
    do return haxe.io.Bytes.ofString(res) end
  end,
  'Write', function(self,data) 
    local s = data:toString();
    do return self._sock:write(s) end
  end,
  'WriteString', function(self,data) 
    do return self._sock:write(data) end
  end,
  'ReadUntil', function(self,delimeter) 
    local res = self._sock:read(delimeter);
    if (res == "") then 
      do return nil end;
    end;
    if (res == nil) then 
      _G.error("Socket error",0);
    end;
    do return res end
  end,
  'Close', function(self) 
    self._sock:shutdown();
  end,
  'Bind', function(self,host,port,handler) 
    self._sock = self._module.tcp_server(host,port,function(s,e) 
      local tmp = Peer.new();
      handler(tmp,TcpSocket.new(s));
    end);
  end
  ,'__class__',  TcpSocket
)

TestWsServer.new = {}
TestWsServer.__name__ = true
TestWsServer.main = function() 
  local wsock = WebSocketServer.new();
  wsock:OnConnect(function(p,c) 
    haxe.Log.trace("CONNECT",_hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="TestWsServer.hx",lineNumber=11,className="TestWsServer",methodName="main"}));
  end);
  wsock:OnData(function(p1,c1,data) 
    haxe.Log.trace(data:toString(),_hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="TestWsServer.hx",lineNumber=15,className="TestWsServer",methodName="main"}));
    c1:WriteString("Привет");
    c1:WriteString("GOOD");
  end);
  wsock:OnDisconnect(function(p2) 
    haxe.Log.trace("DISSCON",_hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="TestWsServer.hx",lineNumber=21,className="TestWsServer",methodName="main"}));
  end);
  wsock:OnError(function(p3,e) 
    haxe.Log.trace(e,_hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="TestWsServer.hx",lineNumber=25,className="TestWsServer",methodName="main"}));
  end);
  wsock:Bind("localhost",3301);
end

WebSocketServer.new = function() 
  local self = _hx_new(WebSocketServer.prototype)
  WebSocketServer.super(self)
  return self
end
WebSocketServer.super = function(self) 
  self._sock = TcpSocket.new();
end
WebSocketServer.__name__ = true
WebSocketServer.prototype = _hx_a(
  'Handler', function(self,p,s) 
    local ih = InternalHandler.new(p,s);
    ih.OnConnect = self._onConnect;
    ih.OnData = self._onData;
    ih.OnError = self._onError;
    ih:Start();
  end,
  'OnConnect', function(self,call) 
    self._onConnect = _hx_funcToField(call);
  end,
  'OnData', function(self,call) 
    self._onData = _hx_funcToField(call);
  end,
  'OnDisconnect', function(self,call) 
    self._onDisconnect = _hx_funcToField(call);
  end,
  'OnError', function(self,call) 
    self._onError = _hx_funcToField(call);
  end,
  'Bind', function(self,host,port) 
    if (self._onData == nil) then 
      _G.error("No data handler",0);
    end;
    self._sock:Bind(host,port,_hx_bind(self,self.Handler));
  end
  ,'__class__',  WebSocketServer
)

haxe.IMap.new = {}
haxe.IMap.__name__ = true

haxe.Log.new = {}
haxe.Log.__name__ = true
haxe.Log.trace = function(v,infos) 
  local str = nil;
  if (infos ~= nil) then 
    str = infos.fileName .. ":" .. infos.lineNumber .. ": " .. Std.string(v);
    if (infos.customParams ~= nil) then 
      str = str .. ("," .. infos.customParams:join(","));
    end;
  else
    str = v;
  end;
  if (str == nil) then 
    str = "null";
  end;
  _hx_print(str);
end

haxe.io.Bytes.new = function(length,b) 
  local self = _hx_new(haxe.io.Bytes.prototype)
  haxe.io.Bytes.super(self,length,b)
  return self
end
haxe.io.Bytes.super = function(self,length,b) 
  self.length = length;
  self.b = b;
end
haxe.io.Bytes.__name__ = true
haxe.io.Bytes.alloc = function(length) 
  local a = Array.new();
  local _g1 = 0;
  local _g = length;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    a:push(0);
    end;
  do return haxe.io.Bytes.new(length,a) end;
end
haxe.io.Bytes.ofString = function(s) 
  local _g = _hx_tab_array({ }, 0);
  local _g2 = 0;
  local _g1 = s.length;
  while (_g2 < _g1) do 
    _g2 = _g2 + 1;
    local c = _g2 - 1;
    _g:push(_G.string.byte(s,c + 1));
    end;
  local bytes = _g;
  do return haxe.io.Bytes.new(bytes.length,bytes) end;
end
haxe.io.Bytes.prototype = _hx_a(
  'blit', function(self,pos,src,srcpos,len) 
    if (((((pos < 0) or (srcpos < 0)) or (len < 0)) or ((pos + len) > self.length)) or ((srcpos + len) > src.length)) then 
      _G.error(haxe.io.Error.OutsideBounds,0);
    end;
    local b1 = self.b;
    local b2 = src.b;
    if ((b1 == b2) and (pos > srcpos)) then 
      local i = len;
      while (i > 0) do 
        i = i - 1;
        b1[i + pos] = b2[i + srcpos];
        end;
      do return end;
    end;
    local _g1 = 0;
    local _g = len;
    while (_g1 < _g) do 
      _g1 = _g1 + 1;
      local i1 = _g1 - 1;
      b1[i1 + pos] = b2[i1 + srcpos];
      end;
  end,
  'sub', function(self,pos,len) 
    if (((pos < 0) or (len < 0)) or ((pos + len) > self.length)) then 
      _G.error(haxe.io.Error.OutsideBounds,0);
    end;
    do return haxe.io.Bytes.new(len,self.b:slice(pos,pos + len)) end
  end,
  'getString', function(self,pos,len) 
    if (((pos < 0) or (len < 0)) or ((pos + len) > self.length)) then 
      _G.error(haxe.io.Error.OutsideBounds,0);
    end;
    local b = self.b.length;
    local begin = lua.Boot.__cast((function() 
      local _hx_1
      if (Math.isNaN(pos) or Math.isNaN(b)) then 
      _hx_1 = (0/0); else 
      _hx_1 = _G.math.min(pos,b); end
      return _hx_1
    end )() , Int);
    local a = pos + len;
    local b1 = self.b.length;
    local _end = lua.Boot.__cast((function() 
      local _hx_2
      if (Math.isNaN(a) or Math.isNaN(b1)) then 
      _hx_2 = (0/0); else 
      _hx_2 = _G.math.min(a,b1); end
      return _hx_2
    end )() , Int);
    local _g = _hx_tab_array({ }, 0);
    local _g2 = begin;
    local _g1 = _end;
    while (_g2 < _g1) do 
      _g2 = _g2 + 1;
      local i = _g2 - 1;
      _g:push(_G.string.char(self.b[i]));
      end;
    do return _g:join("") end
  end,
  'toString', function(self) 
    do return self:getString(0,self.length) end
  end
  ,'__class__',  haxe.io.Bytes
)

haxe.crypto.Base64.new = {}
haxe.crypto.Base64.__name__ = true
haxe.crypto.Base64.encode = function(bytes,complement) 
  if (complement == nil) then 
    complement = true;
  end;
  local str = haxe.crypto.BaseCode.new(haxe.crypto.Base64.BYTES):encodeBytes(bytes):toString();
  if (complement) then 
    local _g = _G.math.fmod(bytes.length, 3);
    local _g1 = _g;
    if (_g1) == 1 then 
      str = str .. "==";
    elseif (_g1) == 2 then 
      str = str .. "=";else end;
  end;
  do return str end;
end

haxe.crypto.BaseCode.new = function(base) 
  local self = _hx_new(haxe.crypto.BaseCode.prototype)
  haxe.crypto.BaseCode.super(self,base)
  return self
end
haxe.crypto.BaseCode.super = function(self,base) 
  local len = base.length;
  local nbits = 1;
  while (len > (_hx_bit.lshift(1,nbits))) do 
    nbits = nbits + 1;
    end;
  if ((nbits > 8) or (len ~= (_hx_bit.lshift(1,nbits)))) then 
    _G.error("BaseCode : base length must be a power of two.",0);
  end;
  self.base = base;
  self.nbits = nbits;
end
haxe.crypto.BaseCode.__name__ = true
haxe.crypto.BaseCode.prototype = _hx_a(
  'encodeBytes', function(self,b) 
    local nbits = self.nbits;
    local base = self.base;
    local size = Std.int((b.length * 8) / nbits);
    local out = haxe.io.Bytes.alloc(size + (function() 
      local _hx_1
      if ((_G.math.fmod(b.length * 8, nbits)) == 0) then 
      _hx_1 = 0; else 
      _hx_1 = 1; end
      return _hx_1
    end )());
    local buf = 0;
    local curbits = 0;
    local mask = (_hx_bit.lshift(1,nbits)) - 1;
    local pin = 0;
    local pout = 0;
    while (pout < size) do 
      while (curbits < nbits) do 
        curbits = curbits + 8;
        buf = _hx_bit.lshift(buf,8);
        pin = pin + 1;
        buf = _hx_bit.bor(buf,b.b[pin - 1]);
        end;
      curbits = curbits - nbits;
      pout = pout + 1;
      out.b[pout - 1] = _hx_bit.band(base.b[_hx_bit.band(_hx_bit.arshift(buf,curbits),mask)],255);
      end;
    if (curbits > 0) then 
      pout = pout + 1;
      out.b[pout - 1] = _hx_bit.band(base.b[_hx_bit.band(_hx_bit.lshift(buf,nbits - curbits),mask)],255);
    end;
    do return out end
  end,
  'initTable', function(self) 
    local tbl = Array.new();
    local _g = 0;
    while (_g < 256) do 
      _g = _g + 1;
      local i = _g - 1;
      tbl[i] = -1;
      end;
    local _g1 = 0;
    local _g2 = self.base.length;
    while (_g1 < _g2) do 
      _g1 = _g1 + 1;
      local i1 = _g1 - 1;
      tbl[self.base.b[i1]] = i1;
      end;
    self.tbl = tbl;
  end,
  'decodeBytes', function(self,b) 
    local nbits = self.nbits;
    local base = self.base;
    if (self.tbl == nil) then 
      self:initTable();
    end;
    local tbl = self.tbl;
    local size = _hx_bit.arshift(b.length * nbits,3);
    local out = haxe.io.Bytes.alloc(size);
    local buf = 0;
    local curbits = 0;
    local pin = 0;
    local pout = 0;
    while (pout < size) do 
      while (curbits < 8) do 
        curbits = curbits + nbits;
        buf = _hx_bit.lshift(buf,nbits);
        pin = pin + 1;
        local i = tbl[b.b[pin - 1]];
        if (i == -1) then 
          _G.error("BaseCode : invalid encoded char",0);
        end;
        buf = _hx_bit.bor(buf,i);
        end;
      curbits = curbits - 8;
      pout = pout + 1;
      out.b[pout - 1] = _hx_bit.band(_hx_bit.band(_hx_bit.arshift(buf,curbits),255),255);
      end;
    do return out end
  end
  ,'__class__',  haxe.crypto.BaseCode
)

haxe.crypto.Sha1.new = function() 
  local self = _hx_new(haxe.crypto.Sha1.prototype)
  haxe.crypto.Sha1.super(self)
  return self
end
haxe.crypto.Sha1.super = function(self) 
end
haxe.crypto.Sha1.__name__ = true
haxe.crypto.Sha1.encode = function(s) 
  local sh = haxe.crypto.Sha1.new();
  local h = sh:doEncode(haxe.crypto.Sha1.str2blks(s));
  do return sh:hex(h) end;
end
haxe.crypto.Sha1.str2blks = function(s) 
  local s1 = haxe.io.Bytes.ofString(s);
  local nblk = (_hx_bit.arshift(s1.length + 8,6)) + 1;
  local blks = Array.new();
  local _g1 = 0;
  local _g = nblk * 16;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    blks[i] = 0;
    end;
  local _g11 = 0;
  local _g2 = s1.length;
  while (_g11 < _g2) do 
    _g11 = _g11 + 1;
    local i1 = _g11 - 1;
    local p = _hx_bit.arshift(i1,2);
    local blks1 = blks;
    local p1 = p;
    blks1[p1] = _hx_bit.bor(blks1[p1],_hx_bit.lshift(s1.b[i1],24 - (_hx_bit.lshift((_hx_bit.band(i1,3)),3))));
    end;
  local i2 = s1.length;
  local p2 = _hx_bit.arshift(i2,2);
  local blks2 = blks;
  local p3 = p2;
  blks2[p3] = _hx_bit.bor(blks2[p3],_hx_bit.lshift(128,24 - (_hx_bit.lshift((_hx_bit.band(i2,3)),3))));
  blks[(nblk * 16) - 1] = s1.length * 8;
  do return blks end;
end
haxe.crypto.Sha1.prototype = _hx_a(
  'doEncode', function(self,x) 
    local w = Array.new();
    local a = 1732584193;
    local b = -271733879;
    local c = -1732584194;
    local d = 271733878;
    local e = -1009589776;
    local i = 0;
    while (i < x.length) do 
      local olda = a;
      local oldb = b;
      local oldc = c;
      local oldd = d;
      local olde = e;
      local j = 0;
      while (j < 80) do 
        if (j < 16) then 
          w[j] = x[i + j];
        else
          local num = _hx_bit.bxor(_hx_bit.bxor(_hx_bit.bxor(w[j - 3],w[j - 8]),w[j - 14]),w[j - 16]);
          w[j] = _hx_bit.bor(_hx_bit.lshift(num,1),_hx_bit.rshift(num,31));
        end;
        local t = ((((_hx_bit.bor(_hx_bit.lshift(a,5),_hx_bit.rshift(a,27))) + self:ft(j,b,c,d)) + e) + w[j]) + self:kt(j);
        e = d;
        d = c;
        c = _hx_bit.bor(_hx_bit.lshift(b,30),_hx_bit.rshift(b,2));
        b = a;
        a = t;
        j = j + 1;
        end;
      a = a + olda;
      b = b + oldb;
      c = c + oldc;
      d = d + oldd;
      e = e + olde;
      i = i + 16;
      end;
    do return _hx_tab_array({[0]=a, b, c, d, e }, 5) end
  end,
  'ft', function(self,t,b,c,d) 
    if (t < 20) then 
      do return _hx_bit.bor(_hx_bit.band(b,c),_hx_bit.band(_hx_bit.bnot(b),d)) end;
    end;
    if (t < 40) then 
      do return _hx_bit.bxor(_hx_bit.bxor(b,c),d) end;
    end;
    if (t < 60) then 
      do return _hx_bit.bor(_hx_bit.bor(_hx_bit.band(b,c),_hx_bit.band(b,d)),_hx_bit.band(c,d)) end;
    end;
    do return _hx_bit.bxor(_hx_bit.bxor(b,c),d) end
  end,
  'kt', function(self,t) 
    if (t < 20) then 
      do return 1518500249 end;
    end;
    if (t < 40) then 
      do return 1859775393 end;
    end;
    if (t < 60) then 
      do return -1894007588 end;
    end;
    do return -899497514 end
  end,
  'hex', function(self,a) 
    local str = "";
    local _g = 0;
    while (_g < a.length) do 
      local num = a[_g];
      _g = _g + 1;
      str = str .. StringTools.hex(num,8);
      end;
    do return str:toLowerCase() end
  end
  ,'__class__',  haxe.crypto.Sha1
)

haxe.ds.StringMap.new = function() 
  local self = _hx_new(haxe.ds.StringMap.prototype)
  haxe.ds.StringMap.super(self)
  return self
end
haxe.ds.StringMap.super = function(self) 
  self.v = {}
  self.k = {}
end
haxe.ds.StringMap.__name__ = true
haxe.ds.StringMap.__interfaces__ = {haxe.IMap}
haxe.ds.StringMap.prototype = _hx_a(
  
  '__class__',  haxe.ds.StringMap
)

haxe.io.Eof.new = {}
haxe.io.Eof.__name__ = true
haxe.io.Eof.prototype = _hx_a(
  'toString', function(self) 
    do return "Eof" end
  end
  ,'__class__',  haxe.io.Eof
)
_hxClasses["haxe.io.Error"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Blocked","Overflow","OutsideBounds","Custom"},4)}
haxe.io.Error = _hxClasses["haxe.io.Error"];
haxe.io.Error.Blocked = _hx_tab_array({[0]="Blocked",0,__enum__ = haxe.io.Error},2)

haxe.io.Error.Overflow = _hx_tab_array({[0]="Overflow",1,__enum__ = haxe.io.Error},2)

haxe.io.Error.OutsideBounds = _hx_tab_array({[0]="OutsideBounds",2,__enum__ = haxe.io.Error},2)

haxe.io.Error.Custom = function(e) local _x = _hx_tab_array({[0]="Custom",3,e,__enum__=haxe.io.Error}, 3); return _x; end 

lua.Boot.new = {}
lua.Boot.__name__ = true
lua.Boot.getClass = function(o) 
  if (lua.Boot.__instanceof(o,Array)) then 
    do return Array end;
  else
    local cl = o.__class__;
    if (cl ~= nil) then 
      do return cl end;
    else
      do return nil end;
    end;
  end;
end
lua.Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return lua.Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return true end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == lua.Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == lua.UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    if (lua.Boot.extendsOrImplements(lua.Boot.getClass(o),cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_1
      if (cl == Class) then 
      _hx_1 = o.__name__ ~= nil; else 
      _hx_1 = false; end
      return _hx_1
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Enum) then 
      _hx_2 = o.__ename__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
lua.Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
lua.Boot.__cast = function(o,t) 
  if (lua.Boot.__instanceof(o,t)) then 
    do return o end;
  else
    _G.error("Cannot cast " .. Std.string(o) .. " to " .. Std.string(t),0);
  end;
end
lua.Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(o[0]) .. "(";
    s = s .. "\t";
    local _g1 = 2;
    local _g = o.length;
    while (_g1 < _g) do 
      _g1 = _g1 + 1;
      local i = _g1 - 1;
      if (i ~= 2) then 
        str = str .. ("," .. lua.Boot.__string_rec(o[i],s));
      else
        str = str .. lua.Boot.__string_rec(o[i],s);
      end;
      end;
    do return str .. ")" end;
  end;
end
lua.Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = lua.Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
lua.Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  local _g = type(o);
  local _g1 = _g;
  if (_g1) == "boolean" then 
    do return tostring(o) end;
  elseif (_g1) == "function" then 
    do return "<function>" end;
  elseif (_g1) == "nil" then 
    do return "null" end;
  elseif (_g1) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o ~= o) then 
          do return "NaN" end;
        else
          do return tostring(o) end;
        end;
      end;
    end;
  elseif (_g1) == "string" then 
    do return o end;
  elseif (_g1) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return lua.Boot.printEnum(o,s) end;
    else
      if ((o.toString ~= nil) and not lua.Boot.isArray(o)) then 
        do return o:toString() end;
      else
        if (lua.Boot.isArray(o)) then 
          local o2 = o;
          if (s.length > 5) then 
            do return "[...]" end;
          else
            local _g2 = _hx_tab_array({ }, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g2:push(lua.Boot.__string_rec(i,s .. 1));
              end;
            do return "[" .. _g2:join(",") .. "]" end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return "{" .. lua.Boot.printClassRec(o,"",s .. "\t") .. "}" end;
          else
            local fields = lua.Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer,"{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer,", ");
              end;
              _G.table.insert(buffer,"" .. Std.string(f1) .. " : " .. Std.string(o[f1]));
              end;
            _G.table.insert(buffer," }");
            do return _G.table.concat(buffer,"") end;
          end;
        end;
      end;
    end;
  elseif (_g1) == "thread" then 
    do return "<thread>" end;
  elseif (_g1) == "userdata" then 
    do return "<userdata>" end;else
  _G.error("Unknown Lua type",0); end;
end
lua.Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g1 = 1;
        local _g = _hx_table.maxn(intf) + 1;
        while (_g1 < _g) do 
          _g1 = _g1 + 1;
          local i = _g1 - 1;
          if (lua.Boot.extendsOrImplements(intf[i],cl2)) then 
            do return true end;
          end;
          end;
      end;
    end;
  end;
  do return lua.Boot.extendsOrImplements(cl1.__super__,cl2) end;
end
lua.Boot.fieldIterator = function(o) 
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (lua.Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1,val);
      end;
    do return val end;
  end;
  local cur_val = next_valid(tbl,cur(tbl,nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function() 
    local ret = cur_val;
    cur_val = next_valid(tbl,cur(tbl,cur_val));
    do return ret end;
  end,hasNext=function() 
    do return cur_val ~= nil end;
  end}) end;
end

lua.UserData.new = {}
lua.UserData.__name__ = true

lua.Thread.new = {}
lua.Thread.__name__ = true
_hx_bit_clamp = function(v) 
  if v <= 2147483647 and v >= -2147483648 then
    if v > 0 then return _G.math.floor(v)
    else return _G.math.ceil(v)
    end
  end
  if v > 2251798999999999 then v = v*2 end;
  if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
  return _hx_bit.band(v, 2147483647 ) - math.abs(_hx_bit.band(v, 2147483648))
end
pcall(require, 'bit')
if bit then
  _hx_bit = bit
elseif bit32 then
  local _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end
local _hx_string_mt = _G.getmetatable('');
String.__oldindex = _hx_string_mt.__index;
_hx_string_mt.__index = String.__index;
_hx_string_mt.__add = function(a,b) return Std.string(a)..Std.string(b) end;
_hx_string_mt.__concat = _hx_string_mt.__add
_hx_array_mt.__index = Array.prototype

haxe.crypto.Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
haxe.crypto.Base64.BYTES = haxe.io.Bytes.ofString(haxe.crypto.Base64.CHARS)
lua.Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
do

String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
end
_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else 
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end
_hx_funcToField = function(f)
  if type(f) == 'function' then 
    return function(self,...) 
      return f(...) 
    end
  else 
    return f
  end
end
_hx_print = print or (function() end)
_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;
TestWsServer.main()
return _hx_exports
